<?php

/**
 * @file
 * Install and uninstall schema and functions for the gravatar module.
 */

/**
 * Implements hook_schema().
 */
function gravatar_schema() {
  $schema['cache_gravatar'] = backdrop_get_schema_unprocessed('system', 'cache');
  $schema['cache_gravatar']['description'] = t('Cache table for the Gravatar module to store already processed and cached images.');
  return $schema;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gravatar_check_requirements() {
  $requirements = gravatar_requirements('runtime');
  if (!empty($requirements['gravatar'])) {
    backdrop_set_message(t('Please check the following potential issues: !issues', array('!issues' => $requirements['gravatar']['description'])), 'warning', FALSE);
  }
}

/**
 * Implements hook_requirements().
 */
function gravatar_requirements($phase) {
  $config = config('gravatar.settings');
  $requirements = array();
  $notifications = array();

  if ($phase == 'runtime') {
    // Warn if picture support is disabled.
    if (!config_get('system.core', 'user_pictures')) {
      $notifications[] = t('Make sure <a href="@user-settings-link">user picture support</a> is enabled to allow gravatar integration.', array('@user-settings-link' => url('admin/config/people/settings', array('fragment' => 'edit-user-pictures-0-wrapper'))));
    }

    // Warn if no user roles have access to the 'user gravatar' permission.
    $user_roles = user_roles(FALSE, 'use gravatar');
    if (empty($user_roles)) {
      $notifications[] = t('There are no user roles that have the <a href="@permissions-link">%permission permission</a>.', array('%permission' => t('use gravatar'), '@permissions-link' => url('admin/people/permissions', array('fragment' => 'module-gravatar'))));
    }

    // Warn if user pictures are not enabled in the theme.
    // @todo Stupid theme_get_settings generates errors on status report page.
    $default_theme = config_get('system.core', 'theme_default');

    if (!theme_get_setting('toggle_comment_user_picture', $theme = NULL) && !theme_get_setting('toggle_node_user_picture', $theme = NULL)) {
      $notifications[] = t('Make sure user pictures are enabled in your <a href="@theme-settings">theme</a> settings.', array('@theme-settings' => url('admin/appearance/settings/' . $default_theme)));
    }

    $global_default_image = config_get('system.core', 'user_picture_default');
    if (!$global_default_image) {
      if (gravatar_var('default') == GRAVATAR_DEFAULT_GLOBAL) {
        // Warn if global default user picture is empty and used for default gravatar image.
        $notifications[] = t('You have selected the global default user picture for the default gravatar picture, but you have not specified a <a href="@user-picture-link">global default user picture</a>.', array('@user-picture-link' => url('admin/config/people/settings', array('fragment' => 'edit-user-picture-default'))));
      }
    }
    else {
      // Warn if the global default user image exceeds the user picture dimensions.
      $info = function_exists('getimagesize') ? @getimagesize($global_default_image) : array();
      $dimensions = explode('x', config_get('system.core', 'user_picture_dimensions'));
      if ($info && ($info[0] > $dimensions[0] || $info[1] > $dimensions[1])) {
        // @todo Create link to automatically resize image?
        $notifications[] = t('Your <a href="@user-picture-link">global default user picture</a> is too large (@widthx@height pixels) and may not display properly. Please resize it to fit the <a href="@user-picture-settings-link">preferred user picture size</a> (@size pixels).', array('@width' => $info[0], '@height' => $info[1], '@user-picture-link' => $global_default_image, '@user-picture-settings-link' => url('admin/config/people/settings', array('fragment' => 'edit-user-picture-default')), '@size' => implode('x', $dimensions)));
      }
    }
  }

  if (!empty($notifications)) {
    $requirements['gravatar'] = array(
      'title' => t('Gravatar'),
      'value' => t('Potential issues'),
      'description' => theme('item_list', array('items' => $notifications)),
      'severity' => REQUIREMENT_WARNING,
    );
  }

  return $requirements;
}

/**
 * Implements hook_update_N().
 */
function gravatar_update_1000() {
  $config = config('gravatar.settings');
  $config->set('gravatar_default', update_variable_get('gravatar_default', 'GRAVATAR_DEFAULT_MODULE'));
  $config->set('gravatar_size', update_variable_get('gravatar_size', '100'));
  $config->set('gravatar_rating', update_variable_get('gravatar_rating', 'G'));
  $config->set('gravatar_url', update_variable_get('gravatar_url', 'GRAVATAR_URL'));
  $config->set('gravatar_url_ssl', update_variable_get('gravatar_url_ssl', 'GRAVATAR_URL_SSL'));
  $config->set('gravatar_imagedefault', update_variable_get('gravatar_imagedefault', 'FALSE'));
  $config->set('gravatar_default_type', update_variable_get('gravatar_default_type', '4'));
  $config->set('gravatar_imagerating', update_variable_get('gravatar_imagerating', 'FALSE'));
  $config->set('gravatar_displaysize', update_variable_get('gravatar_displaysize', 'FALSE'));
  update_variable_del('gravatar_default');
  update_variable_del('gravatar_size');
  update_variable_del('gravatar_rating');
  update_variable_del('gravatar_url');
  update_variable_del('gravatar_url_ssl');
  update_variable_del('gravatar_imagedefault');
  update_variable_del('gravatar_default_type');
  update_variable_del('gravatar_imagerating');
  update_variable_del('gravatar_displaysize');
}
