<?php
/**
 * $Id$
 * Gravatar integration in comments.
 * @author Arnaud 'Narno' Ligny <arnaud.ligny@narno.com>
 * @copyright Narno.com
 */

define(GRAVATAR_URL, 'http://www.gravatar.com/avatar.php?gravatar_id=%s');
define(GRAVATAR_MAX_SIZE, 80);

/**
 * Implementation of hook_menu().
 */
function gravatar_menu($may_cache) {
  $items = array();
  $items[] = array(
    'path' => 'admin/settings/gravatar',
    'title' => t('Gravatar'),
    'description' => t('Gravatar settings.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('gravatar_admin_settings'),
    'access' => user_access('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

/**
 * admin settings for the Gravatar module
 */
function gravatar_admin_settings() {
  $modules_path = drupal_get_path('module', 'gravatar');
  $form = array();
  $form['gravatar_rating'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rating')
  );
  $form['gravatar_rating']['gravatar_rating_option'] = array(
    '#type' => 'radios',
    //'#title' => t('Rating'),
    '#default_value' => variable_get('gravatar_rating_option', 'G'),
    '#options' => array(
      'G' => theme('image', $modules_path . '/rating/g.gif', 'G', 'G', '', FALSE) . '&nbsp;' . t('rated gravatar is suitable for display on all websites with any audience type.'),
      'PG' => theme('image', $modules_path . '/rating/pg.gif', 'PG', 'PG', '', FALSE) . '&nbsp;' . t('rated gravatars contain may contain rude gestures, provocatively dressed individuals, the lesser swear words, or mild violence.'),
      'R' => theme('image', $modules_path . '/rating/r.gif', 'R', 'R', '', FALSE) . '&nbsp;' . t('rated gravatars may contain such things as harsh profanity, intense violence, nudity, or hard drug use.'),
      'X' => theme('image', $modules_path . '/rating/x.gif', 'X', 'X', '', FALSE) . '&nbsp;' . t('rated gravatars may contain hardcore sexual imagery or extremely disturbing violence.')
    ),
    '#description' => t('Specifies the authorized rating')
  );
  $form['gravatar_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Gravatar URL'),
    '#default_value' => variable_get('gravatar_url', GRAVATAR_URL)
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_comment().
 */
function gravatar_comment(&$comment, $op) {
  switch ($op) {
    case 'view':
      // check email address for anonymus user
      // and check picture for authenticated user (don't override picture user)
      if (!empty($comment->mail) && empty($comment->picture)) {
        // Gravatar url
        $grav_url  = sprintf(variable_get('gravatar_url', GRAVATAR_URL), md5($comment->mail));
        // default picture
        $default = variable_get('user_picture_default', '');
        if (!empty($default)) {
          $grav_url .= "&default=" . urlencode(url($default));
        }
        // rating
        $rating = variable_get('gravatar_rating_option', '');
        if (!empty($rating)) {
          $grav_url .= "&rating=" . $rating;
        }
        // set the maximum gravatar sized
        // get the maximum allowed user picture dimensions from user settings
        list($maxwidth, $maxheight) = explode('x', variable_get('user_picture_dimensions', '85x85'));
        if (!empty($maxwidth) && (integer)$maxwidth <= GRAVATAR_MAX_SIZE) {
          $grav_url .= "&size=" . $maxwidth;
        }
        //$comment->picture = url($grav_url); // can't use external file for picture
        $comment->comment = theme('gravatar', $grav_url, $comment->name, $comment->homepage) . $comment->comment;
      }
  }
}

function theme_gravatar($grav_url, $name, $homepage) {
  $alt = t("@user's picture", array('@user' => $name ? $name : variable_get('anonymous', t('Anonymous'))));
  $picture = theme('image', $grav_url, $alt, $alt, '', FALSE);
  if (!empty($homepage)) {
    $picture = l($picture, $homepage, array('title' => t('View user website.')), NULL, NULL, FALSE, TRUE);
  }
  $output = "\n<div class=\"picture\">" . $picture . "</div>\n";
  return $output;
}
?>
